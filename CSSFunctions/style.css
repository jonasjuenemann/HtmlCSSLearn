/*
Background images set using the url() function may not always fill the background in the specific way we want. For instance,
if the background image is smaller than the container area, the image will repeat in a tile pattern by default.
There are various properties that allow us to set the background image in the manner we want.
center the background image using the background-position property.
set the size of the background image to cover the container area using the background-size property.
background-repeat: no-repeat;

The calc() function can be used to perform mathematical operations on a mix of units (rem, vw, px, etc). When performing addition (+) or
subtraction (-), both numbers being operated on must have specified units. Division (/) requires the divisor (second operand) to be a
unit-less number, and multiplication (*) requires one of the operands to be unit-less. Keep in mind that the calc() function requires
whitespace between the operator and the numbers in the expression. The function can also be used as one of the multiple values for a
property or argument in another function.

If we want to create responsive elements, the min() and max() functions are great solutions for setting case-specific design constraints.
The min() function will select the smallest value from a range of values and set that as the associated property’s value.
The max() function will select the largest value from a range of values, which will be used as the associated property’s value.
Now the min() function chooses the smaller value of two values given as arguments—in other words, the min() function defines the maximum
width the content class can have.
-> min(500px, 50vw); If the viewport width is greater than 1000 pixels (meaning that 50vw will be greater than 500px), the width of the content class will be set to a maximum width of 500px
When the viewport width is smaller than 1000 pixels, the maximum width of the content class is 50vw.
When the viewport width is greater than 1000 pixels, the maximum width is 500px -> min immer der kleinere der beiden Werte, max() ist dann das genaue gegenteil!

sometimes we will want to design elements to dynamically scale but also stay confined between an upper and lower bound. The clamp() function is ideal for achieving this!
font-size: clamp(12px, 1.5vw, 48px);
# macht offensichtlich nur Sinn, wenn der preferred (mittlere) Wert variabel ist. (rem, vw...)

The main color functions are:
The rgb() function which defines color using the standard RGB (red, green, and blue) model.
The rgba() function, which is similar to the rgb() function except it also defines an alpha channel to specify the color’s opacity level.
The hsl() function. This function defines color using hue, saturation and lightness.
The hsla() function. Again, this function is similar to the hsl() function except it also defines an alpha channel that specifies the color’s opacity level.

Like color functions, there are CSS functions specifically for the filter and backdrop-filter properties. These functions create a variety of visual effects for desired elements.
We can use the brightness() function for the filter and backdrop-filter property to affect an element’s overall brightness by applying a linear multiplier to it.
The brightness() function takes a single argument for the amount, which can be either a number or percentage. Any value under 100% or 1.0 darkens the element, and any value over 100%
or 1.0 will brighten the element. The default value of brightness is 100% or 1.0.
The blur() function applies a Gaussian blur to a specified element.
drop-shadow(offset-x offset-y blur-radius color). This function applies a drop shadow effect to the desired element.
button {
  filter: drop-shadow(-10px 5px 0.2rem rgba(50, 200, 210, 0.6));
}

We can transform any HTML elements using the transform property combined with CSS functions that scale, rotate, and even distort. These functions apply both 2D and 3D transformations to elements.
scale() function resizes an element, both horizontally and vertically, on a 2D plane. It can take either one or two parameters. If only one argument is given, scale(2) for instance,
then the element will grow proportionally on both the x and y-axis. When two arguments are provided, the first argument scales along the x-axis, and the second scales along the y-axis.
If you only want to scale an element on one of the two axes, either the scaleX() or the scaleY() function can be used
The rotate() function can be used for the transform property to rotate an element around a fixed point on a given 2D plane. The function accepts a single argument for the angle,
which must be in degrees specified with the deg unit.
translate() function moves an element from its initial position to another position on the page specified as the function’s arguments. The function can accept either one or
two arguments—if one argument is provided, then the function will translate the element along the only x-axis by the specified amount. If two arguments are given, the element
translates along the x-axis by the amount specified by the first argument and along the y-axis by the amount specified as the second argument.
Bsp.:
transform: scale(1.4);
Häufig auf Hover Effekten

 */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html {
    font-size: 10px;
}

a {
    text-decoration: none;
    color: inherit;
}

body {
    font-family: 'Helvetica', 'sans-serif';
    font-size: 1.6rem;
    color: #333;
    width: 100%;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 1.5rem;
    margin-top:20px;
    margin-bottom:10px;
    background: white;
}

.main-bg-image {
    width: 100%;
    height: 110%;
    position: absolute;
    top: 0;
    left: 0;
    background: url(https://static-assets.codecademy.com/Courses/Learn-CSS/Functions/main-bg-image.jpg) no-repeat;
    background-size: cover;
    filter: brightness(0.6);
}

.card {
    padding-top: 5%;
    display: flex;
    flex-direction: column;
    background: #fff;
    box-shadow: 2px .8rem 1rem rgba(0, 0, 0, .09);
    border-radius: 8px 8px 0px 0px;
    width: clamp(100px, 90%, 600px);
}

.under {
    letter-spacing: 0px;
}

.image-info {
    height: 25rem;
    position: relative;
    z-index: 1;
    overflow: hidden;
}

.bg-image {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: gray;
    z-index: -1;
    transition: all 2s ease-in-out;
    border-radius: 8px 8px 0px 0px;
    background-image: url(images/argentina.jpg);
    background-position: center;
    background-size: cover;
}

.card:hover .bg-image {
    filter: saturate(0.2);
    transform: scale(1.4);
}

.location-details {
    width: 100%;
    height: 100%;
    font-size: 1.6rem;
    font-weight: bold;
    color: #FFF;
    position: relative;
    top: 0;
    left: 0;
    letter-spacing: 2px;
    border-radius: 8px 8px 0px 0px;
    transform: translate(60%, 50%);
}

.location-details i{
    margin-right: 2rem;
}

.send-to {
    display: inline-block;
    margin-top: 2rem;
}
.from {
    display: block;
    margin-bottom: 1rem;
    margin-top: 1rem;
}

.date {
    display: block;
}

.card-body {
    background: rgb(255, 247, 255);
    padding: 2rem 3rem;
    position: relative;
}

.card-body::before,
.card-body::after {
    content: '';
    position: absolute;
    border: 2px solid hsl(25, 47%, 86%);

}

.card-body::before {
    top: 1.2rem;
    bottom: 1.2rem;
    right: 1.2rem;
}

.card-body::before {
    bottom: 1.2rem;
    left: 1.2rem;
    top: 1.2rem;
}


.card-body::after {
    top: 1.2rem;
    left: 1.2rem;
    right: 1.2rem;
}

.card-body::after {
    top: 1.2rem;
    left: 1.2rem;
    bottom: 1.2rem;
}

.card-title {
    padding: 5px 0;
    font-size: calc(2vw + 1.5rem);
    line-height: 1;
    text-align: center;
    margin-bottom: .5em;
    position: relative;
    z-index: 1;
}

.header-modifier {
    display: inline-block;
    color:#6CACE4;
    transition: transform .8s ease-in-out;
    filter: drop-shadow(10px 5px 0.2rem rgba(236, 217, 203, 0.7));
}

.header-modifier:hover {
    transform: rotate(5deg);
}


.card-text {
    display:inline-block;
    position: relative;
    text-align: center;
    width: clamp(50px, 80%, 600px);
    border-radius: 8px;
    padding: 5px 0;
    overflow-y: hidden;
    left: calc(50% - 40%);
    font-size: clamp(1.5rem, 1.8vw, 1.8rem);
}

ul.activities {
    align-items: center;
    list-style: circle;
    position: relative;
    font-weight: bold;
    color: hsla(208, 69%, 66%, 0.6);
    margin: calc(1vw + 0.5rem) 2rem;


}

li {
    padding: 5px 0;
}

.activities a:hover{
    cursor: pointer;
}

.photo-link{
    text-align: right;
    font-weight: bold;
    margin-top: 1rem;
}

.photo-link a {
    color: rgba(236, 217, 203, 0.9);
    position: relative;
}
